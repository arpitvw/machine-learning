{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    col1  col2\n",
      "0      1     1\n",
      "1      2     2\n",
      "2      3     9\n",
      "3      4    16\n",
      "4      5    25\n",
      "5      6    36\n",
      "6      7    49\n",
      "7      8    64\n",
      "8      9    81\n",
      "9      0     0\n",
      "10    10   100\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import sklearn as sk\n",
    "d = {'col1': [1,2,3,4,5,6,7,8,9,0,10], 'col2': [1,2,9,16,25,36,49,64,81,0,100]}\n",
    "df = pd.DataFrame(data=d)\n",
    "print (df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (11, 2)\n",
      "11\n",
      "Training data size:  (1, 11)\n",
      "(7, 11)\n",
      "(7, 1)\n",
      "(7, 11)\n"
     ]
    }
   ],
   "source": [
    "def sigmoid(x):\n",
    "    return 1/(1 + np.exp(-x))\n",
    "\n",
    "def softmax(x):\n",
    "    t=np.exp(x)\n",
    "    sum1=np.sum(t,axis=0)\n",
    "    return t/sum1\n",
    "learning_rate=0.1\n",
    "df.describe\n",
    "X_input_data=df.values\n",
    "X_training_data=np.transpose(X_input_data[:,:-1]) #Please check labels should be in last column\n",
    "\n",
    "print (\"shape:\",X_input_data.shape)\n",
    "Y_label=np.transpose(X_input_data[:,-1])\n",
    "training_count=X_training_data.shape[1]\n",
    "#features=X_training_data.shape[0]\n",
    "print (training_count)\n",
    "\n",
    "\n",
    "print ('Training data size: ',X_training_data.shape) \n",
    "#print ('Describe: ',df.describe())\n",
    "Features=X_training_data.shape[0]\n",
    "dict_layers={1:15,2:12,3:10,4:7}\n",
    "w1=np.random.uniform(1,0,size=(dict_layers[1],Features))\n",
    "z1=np.dot(w1,X_training_data)\n",
    "a1=sigmoid(z1)\n",
    "\n",
    "w2=np.random.uniform(1,0,size=(dict_layers[2],Features))\n",
    "z2=np.dot(w2,X_training_data)\n",
    "a2=sigmoid(z2)\n",
    "\n",
    "w3=np.random.uniform(1,0,size=(dict_layers[3],Features))\n",
    "z3=np.dot(w3,X_training_data)\n",
    "a3=sigmoid(z3)\n",
    "\n",
    "w4=np.random.uniform(1,0,size=(dict_layers[4],Features))\n",
    "z4=np.dot(w4,X_training_data)\n",
    "a4=sigmoid(z4)\n",
    "\n",
    "\n",
    "#print (\"a4:\",a4)\n",
    "output=softmax(a4)\n",
    "y1=np.array([1,0,0,0,0,0,0]).reshape(7,1)\n",
    "y2=np.array([0,1,0,0,0,0,0]).reshape(7,1)\n",
    "y3=np.array([0,0,1,0,0,0,0]).reshape(7,1)\n",
    "y4=np.array([0,0,0,1,0,0,0]).reshape(7,1)\n",
    "y5=np.array([0,0,0,0,1,0,0]).reshape(7,1)\n",
    "y6=np.array([0,0,0,0,0,1,0]).reshape(7,1)\n",
    "y6=np.array([0,0,0,0,0,0,1]).reshape(7,1)\n",
    "\n",
    "loss=(np.log(a4))\n",
    "####print (loss)\n",
    "\n",
    "## back propagation\n",
    "print (a4.shape)\n",
    "print (w4.shape)\n",
    "dz4=a4-1\n",
    "print (a4.shape)\n",
    "#for i in w4:\n",
    "#    dw4=a4-1 \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "total_weights=X_training_data.shape[0]*dict_layers[1]+dict_layers[1]*dict_layers[2]+dict_layers[3]*dict_layers[4]\n",
    "weights=np.random.uniform(1,0,size=(total_weights,1))\n",
    "A=[]\n",
    "Z=[]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "265"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    z.append(weights[dict_layers[1]*X_training_data.shape[0]].reshape()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[ -3.57546882e-01,  -2.36483787e-01,  -1.47030711e-01,\n",
       "          -8.75351281e-02,  -5.06837441e-02,  -2.88557954e-02,\n",
       "          -1.62673926e-02,  -9.11913983e-03,  -5.09571688e-03,\n",
       "          -5.00000000e-01,  -2.84236185e-03],\n",
       "        [ -3.10574948e-01,  -1.68700459e-01,  -8.37618843e-02,\n",
       "          -3.95539990e-02,  -1.82143421e-02,  -8.28822700e-03,\n",
       "          -3.75079663e-03,  -1.69316365e-03,  -7.63453450e-04,\n",
       "          -5.00000000e-01,  -3.44067903e-04],\n",
       "        [ -4.61806455e-01,  -4.24056043e-01,  -3.87171565e-01,\n",
       "          -3.51537115e-01,  -3.17483286e-01,  -2.85277042e-01,\n",
       "          -2.55116680e-01,  -2.27131645e-01,  -2.01386473e-01,\n",
       "          -5.00000000e-01,  -1.77887827e-01],\n",
       "        [ -3.93270571e-01,  -2.95843470e-01,  -2.14037935e-01,\n",
       "          -1.50033243e-01,  -1.02668000e-01,  -6.90412686e-02,\n",
       "          -4.58653175e-02,  -3.02166176e-02,  -1.97962915e-02,\n",
       "          -5.00000000e-01,  -1.29215778e-02],\n",
       "        [ -4.59244017e-01,  -4.19026042e-01,  -3.79856043e-01,\n",
       "          -3.42190962e-01,  -3.06415266e-01,  -2.72828574e-01,\n",
       "          -2.41640765e-01,  -2.12973957e-01,  -1.86869990e-01,\n",
       "          -5.00000000e-01,  -1.63301677e-01],\n",
       "        [ -3.72076453e-01,  -2.59871194e-01,  -1.72222493e-01,\n",
       "          -1.09752052e-01,  -6.80779797e-02,  -4.14905234e-02,\n",
       "          -2.50080006e-02,  -1.49710524e-02,  -8.92555095e-03,\n",
       "          -5.00000000e-01,  -5.30814445e-03],\n",
       "        [ -4.31736137e-01,  -3.65970559e-01,  -3.04848738e-01,\n",
       "          -2.49911377e-01,  -2.01997525e-01,  -1.61294533e-01,\n",
       "          -1.27483040e-01,  -9.99149436e-02,  -7.77770033e-02,\n",
       "          -5.00000000e-01,  -6.02159692e-02]]),\n",
       " array([[ 0.64245312,  0.76351621,  0.85296929,  0.91246487,  0.94931626,\n",
       "          0.9711442 ,  0.98373261,  0.99088086,  0.99490428,  0.5       ,\n",
       "          0.99715764],\n",
       "        [ 0.68942505,  0.83129954,  0.91623812,  0.960446  ,  0.98178566,\n",
       "          0.99171177,  0.9962492 ,  0.99830684,  0.99923655,  0.5       ,\n",
       "          0.99965593],\n",
       "        [ 0.53819354,  0.57594396,  0.61282844,  0.64846289,  0.68251671,\n",
       "          0.71472296,  0.74488332,  0.77286836,  0.79861353,  0.5       ,\n",
       "          0.82211217],\n",
       "        [ 0.60672943,  0.70415653,  0.78596207,  0.84996676,  0.897332  ,\n",
       "          0.93095873,  0.95413468,  0.96978338,  0.98020371,  0.5       ,\n",
       "          0.98707842],\n",
       "        [ 0.54075598,  0.58097396,  0.62014396,  0.65780904,  0.69358473,\n",
       "          0.72717143,  0.75835923,  0.78702604,  0.81313001,  0.5       ,\n",
       "          0.83669832],\n",
       "        [ 0.62792355,  0.74012881,  0.82777751,  0.89024795,  0.93192202,\n",
       "          0.95850948,  0.974992  ,  0.98502895,  0.99107445,  0.5       ,\n",
       "          0.99469186],\n",
       "        [ 0.56826386,  0.63402944,  0.69515126,  0.75008862,  0.79800247,\n",
       "          0.83870547,  0.87251696,  0.90008506,  0.922223  ,  0.5       ,\n",
       "          0.93978403]]))"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
